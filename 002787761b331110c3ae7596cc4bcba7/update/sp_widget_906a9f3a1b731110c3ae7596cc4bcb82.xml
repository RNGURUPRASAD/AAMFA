<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function loginCtrl($scope, $http, $window, $location, glideUserSession, glideSystemProperties, spUtil) {

	var c = this;
  c.showMenuPage=function(){
		document.location.href='https://dev90563.service-now.com/aamfa?id=aamfaqrp';
	}
	c.remember_me = c.data.forgetMeDefault;
	c.data.url_suffix = $scope.portal ? $scope.portal.url_suffix : "";
	c.masked = true;
	if (!c.data.is_logged_in && c.data.multisso_enabled && c.data.default_idp) {
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = $scope.portal.login_page_dv == pageId;
		c.server.get({
			action: "set_sso_destination",
			pageURI: isLoginPage ? null : c.data.pageURI
		}).then(function() {
			$window.location = "/login_with_sso.do?glide_sso_id=" + c.data.default_idp;
		});
	} else if (!c.data.is_logged_in && c.data.certAuthRedirect && c.data.cert_based_auth && c.data.certHeader == "true") {
        login(null, null, true);
    }
    
    c.login = function(username, password, isCertLogin) {
        login(username, password, isCertLogin);
    };
	
	function login(username, password, isCertLogin) {
		var url = spUtil.getURL({sysparm_type: 'view_form.login'});
		
		// If the page isn't public, then the ID in the
		// URL won't match the rendered page ID
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = $scope.portal.login_page_dv == pageId;

		return $http({
			method: 'post',
			url: url,
			data: $.param({
				'sysparm_type': 'login',
				'ni.nolog.user_password': true,
				'remember_me': !!c.remember_me ? true : false,
				'user_name': username,
				'user_password': password,
				'get_redirect_url': true,
				'is_direct_redirect': true,
				'sysparm_goto_url': isLoginPage ? null : $location.url(),
				'mfa_redirect_url': isLoginPage ? null : c.data.pageURI,
				'cert_login' : !!isCertLogin
			}),
			headers: {
				'Content-Type': 'application/x-www-form-urlencoded'
			}
		}).then(function(response) {
			if (!response.data) {
				c.message = $scope.data.errorMsg;
				return;
			}

			if (response.data.status == 'success') {
				if (c.data.multiFactorAuthEnabled) {
					c.server.get({
						action: "multi_factor_auth_setup",
						directTo: response.data.redirect_url
					}).then(handleLoginResponse.bind(response), handleLoginResponse.bind(response));
				} else {
					handleLoginResponse.call(response);
				}
			} else if (response.data.status == 'mfa_code_required') {
					$window.location = '/validate_multifactor_auth_code.do';
			} else {
				// wrong username or password
				c.message = response.data.message;
				c.password = "";
				c.username = "";
				angular.element("#username").focus();
			}

		}, function errorCallback(response) {
			c.message = $scope.data.errorMsg;
		});
	};

	c.oidcLogin = function(idProvider){
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = $scope.portal.login_page_dv == pageId;
		c.server.get({
			action: "set_sso_destination",
			pageURI: isLoginPage ? null : c.data.pageURI
		}).then(function() {
			$window.location = "/login_with_sso.do?glide_sso_id=" + idProvider;
		});
	};
	
	c.externalLogin = function() {
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = $scope.portal.login_page_dv == pageId;
		c.server.get({
			action: "set_sso_destination",
			pageURI: isLoginPage ? null : c.data.pageURI
		}).then(function() {
			glideSystemProperties.set("glide.authenticate.multisso.enabled", true);

			glideUserSession.getSsoRedirectUrlForUsername(c.username)
				.then(function(url) {
					$window.location = url;
				}, function(err) {
					spUtil.addErrorMessage($scope.data.errorMsg2);
				});
		});
	}

	function handleLoginResponse() {
		c.success = this.data.message;
		$window.location = this.data.redirect_url;
		if ($window.location.hash.length > 0)
			$window.location.reload();
	}

	c.setExternalLogin = function(newVal) {
		c.externalLoginMode = newVal;
		if(!newVal)
			c.masked = true;
	}
	
	c.renderMaskIcon = function() {
		var passwordEle = document.getElementById("password");
		var maskEle = document.getElementById("mask_icon");
		var btnDescription = document.getElementById("btnDescription");
		var element = document.getElementsByClassName("mask_btn")[0];
		var isPasswordType = passwordEle.type === 'password';
		maskEle.classList.toggle('active', isPasswordType);
		maskEle.setAttribute('data-original-title', (isPasswordType) ? 'Hide password' : 'Show password');
		element.setAttribute('aria-label', (isPasswordType) ? 'Hide password' : 'Show password');
		passwordEle.type  = (isPasswordType) ? 'text' : 'password';
		btnDescription.textContent = (isPasswordType)? 'Password shown' : 'Password hidden';
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.sp-login-widget { &#13;
  &#13;
  &#13;
 &#13;
    text-align: center;&#13;
  &#13;
  .panel-body {&#13;
    padding: 50px 30px 30px;&#13;
    background-color: rgba(117, 190, 218, 1.0);&#13;
    background-image: url("https://images.pexels.com/photos/2922672/pexels-photo-2922672.jpeg?auto=compress&amp;cs=tinysrgb&amp;w=1260&amp;h=750&amp;dpr=1");&#13;
  }&#13;
  .panel-heading{&#13;
    background-color:rgba(117, 190, 218, 1.0);&#13;
    background-image: url("https://images.pexels.com/photos/2922672/pexels-photo-2922672.jpeg?auto=compress&amp;cs=tinysrgb&amp;w=1260&amp;h=750&amp;dpr=1");&#13;
  	color:white;&#13;
  }&#13;
  .forgot-pwd-link{&#13;
   color:white;&#13;
  }&#13;
  .sp-self-registration{&#13;
  	background-color: hsl(89, 43%, 51%);;&#13;
    padding-top:20px;&#13;
  	padding-bottom:20px;&#13;
    &#13;
    &#13;
  }&#13;
  .form-control,&#13;
  label[for="username"],&#13;
  label[for="password"] {&#13;
    color: black;&#13;
    text-align:left;&#13;
  }&#13;
  &#13;
  .btn {&#13;
    font-weight: 600;&#13;
    font-size: 2.0rem;&#13;
    background-color: $login-btn-bg;&#13;
    border-color: $login-btn-border;&#13;
  }&#13;
  &#13;
  .list-group {&#13;
    margin-bottom: 12px;&#13;
  }&#13;
  &#13;
  .login-button-old {&#13;
    margin-top: 7px;&#13;
  }&#13;
  &#13;
  .login-alert {&#13;
    margin-left: 0px;&#13;
    margin-right: 0px;&#13;
  }&#13;
&#13;
}&#13;
//STRY50033370: Forgot Password link in the login widget&#13;
//Start -- login widget advanced view&#13;
.sp-login-widget.advanced {  &#13;
  .panel-title {&#13;
    font-size:25px;&#13;
  }&#13;
  &#13;
  .panel-default &gt; .panel-heading {&#13;
    background-color:$panel-bg ;&#13;
    border: 0px;    &#13;
  }&#13;
  &#13;
  .panel-body {&#13;
    padding: 0px 0px 10px;&#13;
  }&#13;
&#13;
  [placeholder]::-webkit-input-placeholder { &#13;
    transition: opacity 0.01s 0.01s ease !important; &#13;
    opacity: 0 !important; &#13;
  }&#13;
&#13;
  .form-signin {&#13;
    .list-group-item { &#13;
      border: 0px;&#13;
    }&#13;
    &#13;
    .login-alert {&#13;
    margin-left: 15px;&#13;
    margin-right: 15px;&#13;
    }&#13;
    &#13;
    .btn {&#13;
      font-weight: 400 !important;&#13;
      border-color: $brand-primary;&#13;
      background-color: $brand-primary;&#13;
      border-radius: 2px;&#13;
    }&#13;
&#13;
    .forgot-pwd-div {&#13;
      padding-right: 15px;&#13;
      padding-left: 15px;&#13;
      .forgot-text {&#13;
        font-size: 16px;	&#13;
        line-height: 20px;&#13;
        padding-top: 8px;&#13;
        &#13;
      }&#13;
      &#13;
      .btn {&#13;
        line-height: 16px;&#13;
        font-size: 14px;&#13;
        margin-top: 0px;&#13;
      }&#13;
      &#13;
    }&#13;
    &#13;
    .submit-btn {&#13;
      padding-right: 15px;&#13;
      padding-left: 15px;&#13;
    }&#13;
    &#13;
    .input-group-advanced {&#13;
      margin-top: 10px;&#13;
    }&#13;
&#13;
    .input-advanced {&#13;
      border: 1px solid $btn-default-border !important;&#13;
      border-radius: 3px !important;&#13;
      background-color: $panel-bg !important;&#13;
    }&#13;
    &#13;
    .checkbox {&#13;
      padding-left: 15px !important; &#13;
    }&#13;
   &#13;
    .label-advanced {&#13;
      position: relative;&#13;
      width: 100%;&#13;
      padding: 0;&#13;
      overflow: visible;&#13;
      border: 0;&#13;
      height: 19px;&#13;
      color: $text-color;&#13;
      font-size: 16px;&#13;
      line-height: 19px;&#13;
    }&#13;
    &#13;
    .mask_btn {&#13;
      background-color: #fcfcfc;&#13;
      border-color: #939393;&#13;
      border-left : 0px;&#13;
      width:fit-content;&#13;
      border-top-left-radius: 0px !important;&#13;
      border-bottom-left-radius: 0px !important;&#13;
      font-size: 1.4rem !important;&#13;
      position: relative;&#13;
&#13;
	&amp;.active {&#13;
		&amp;:after {&#13;
          	background-color: #2e2e2e;&#13;
			content: "";&#13;
			height: 16px;&#13;
			left: 50%;&#13;
	    		margin-top: -8px;&#13;
			margin-inline-start: -1px;&#13;
			margin-block-start: -8px;&#13;
			position: absolute;&#13;
			top: 50%;&#13;
			transform: rotate(45deg);&#13;
			width: 1px;&#13;
			}&#13;
		}&#13;
    }&#13;
&#13;
    &#13;
    .loginWithBtn {&#13;
      padding: 0 1.5rem;&#13;
    }&#13;
    &#13;
  }&#13;
&#13;
}&#13;
//End -- login widget advanced view&#13;
.sp-self-registration {&#13;
  text-align: center;&#13;
}&#13;
.sp-login-widget {&#13;
  &#13;
.bar {&#13;
  margin: 12px 0;&#13;
  span {&#13;
    position: relative;&#13;
    display: block;&#13;
    text-align: center;&#13;
&#13;
    &amp;:before, &amp;:after {&#13;
      content: '';&#13;
      position: absolute;&#13;
      width: calc(50% - 24px);&#13;
      height: 1px;&#13;
      background-color: #b3bac7;&#13;
      top: 8px;&#13;
    }&#13;
    &amp;:before {&#13;
      right: 0;&#13;
    }&#13;
    &amp;:after {&#13;
      left: 0;&#13;
    }&#13;
  }&#13;
}&#13;
button.cert, a.idp {&#13;
  background-color: #fff !important;&#13;
  border-color: #ccc !important;&#13;
  width: 100%;&#13;
  margin-bottom: 10px;&#13;
&#13;
  &amp;:hover {&#13;
    border-color: #adadad;&#13;
    background-color: #e6e6e6;&#13;
  }&#13;
  img {&#13;
    height: 20px;&#13;
    width: 20px;&#13;
    margin-bottom: 3px;&#13;
    margin-right: 9px;&#13;
  }&#13;
}&#13;
  img.eye-icon {&#13;
    content:url("eye.svg");&#13;
    cursor: pointer;&#13;
    width:18px;&#13;
    height:18px;&#13;
    display: flex;&#13;
    justify-content:center;&#13;
    align-items:center;&#13;
    float:left;&#13;
  }&#13;
  &#13;
  img.eye-icon.slashed {&#13;
    content:url("eye-slash.svg");&#13;
  }&#13;
  &#13;
  .password-group {&#13;
    display:flex;&#13;
    flex-direction:row;&#13;
  }&#13;
 &#13;
  .mask_btn {&#13;
      background-color: #fcfcfc;&#13;
      border-color: #939393;&#13;
      border-left : 0px;&#13;
      width:fit-content;&#13;
      border-top-left-radius: 0px !important;&#13;
      border-bottom-left-radius: 0px !important;&#13;
      font-size: 1.4rem !important;&#13;
      position: relative;&#13;
&#13;
	&amp;.active {&#13;
		&amp;:after {&#13;
          	background-color: #2e2e2e;&#13;
			content: "";&#13;
			height: 16px;&#13;
			left: 50%;&#13;
	    		margin-top: -8px;&#13;
			margin-inline-start: -1px;&#13;
			margin-block-start: -8px;&#13;
			position: absolute;&#13;
			top: 50%;&#13;
			transform: rotate(45deg);&#13;
			width: 1px;&#13;
			}&#13;
		}&#13;
    }&#13;
  input::-ms-reveal,&#13;
    input::-ms-clear {&#13;
      display: none;&#13;
  }&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>mfa_login</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>MFA_Login</name>
        <option_schema>[{"name":"show_panel","section":"Presentation","default_value":"true","label":"Show Panel","type":"boolean"},{"name":"use_advanced","section":"Presentation","default_value":"false","label":"Use Advanced View","type":"boolean"}]</option_schema>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
    options.show_panel = options.show_panel == "true" || options.show_panel == true;

    if (input && input.action === "multi_factor_auth_setup") {
        if (gs.getSession().getProperty("setup_multifactor_authn")) {
            gs.getSession().putProperty("nav_to", input.directTo);
            gs.getSession().putProperty("starting_page", input.directTo);
            gs.getSession().putProperty("is_direct_redirect", "true");
        }
        return;
    }

    // We don't want to set a starting page until we've begun the login process.
    if (input && input.action === "set_sso_destination") {
        var gs_nav_to = gs.getSession().getProperty("nav_to");
        gs.getSession().putProperty("nav_to", null);

        if (input.pageURI) {
            gs.getSession().putProperty("is_direct_redirect", "true");
            gs.getSession().putProperty("starting_page", input.pageURI);
        } else if (!gs.getSession().getProperty("starting_page") && gs_nav_to)
            gs.getSession().putProperty("starting_page", gs_nav_to);
        return;

    }

    // for self registration fields
    var portalRecord = $sp.getPortalRecord();
    var self_registration_field = portalRecord ? portalRecord.getValue("user_registration_config") : "";
    if (self_registration_field) {
        var registration_config = new GlideRecord("sys_user_registration_config");
        registration_config.addActiveQuery();
        registration_config.query('sys_id', self_registration_field);
        if (registration_config.next()) {
            var self_registration_record_producer = registration_config.getValue("record_producer");
            var self_registration_label = registration_config.getValue("registration_label") || gs.getMessage("Sign Up");
            data.self_registration_record_producer = self_registration_record_producer;
            data.self_registration_label = self_registration_label;
        }
    }

    //Enabling certificate based authentication per portal
    if (portalRecord && (portalRecord.getValue('enable_certificate_based_authentication') == 1))
        data.cert_based_auth = gs.getProperty('glide.authenticate.mutual.enabled', 'false') == 'true';
    
    //get the certificate header
    if (data.cert_based_auth) {
	var request = GlideTransaction.get().getRequest();
	var certHeader = request.getHeader("X-Client-Cert");
	if (!certHeader) {
		data.certHeader = "false";
            gs.log("Failed to register PIV/CAC certificate to the user account.");
        } else
		data.certHeader = "true";    
    }

    //Get the OpenID Connect type Identity provider which can be shown on the Portal login page.
    data.isShowLoginWithIdps = false;
    data.isMultiSSOActive = gs.getProperty('glide.authenticate.multisso.enabled', 'false') == 'true';
    var gr = new GlideRecord("oidc_identity_provider");
    if (data.isMultiSSOActive && gr.isValid()) {
        var oidcUtil = new MultiSSO_OidcUtil();
        data.oidcRecords = oidcUtil.getOidcIdpRecords();
        data.isShowLoginWithIdps = (data.oidcRecords.length > 0);
    }    
        

    //STRY50033370: Forgot Password link in the login widget
    data.pswdResetUrl = gs.getProperty('glide.security.password_reset.uri');
    data.forgotPwdLinkProp = gs.getProperty('glide.security.forgot_password.display.link');

    data.errorMsg = gs.getMessage("There was an error processing your request");
    data.errorMsg2 = gs.getMessage("An error has occurred - please contact your system administrator");
    data.passwordMsg = gs.getMessage("Password");
    data.usernameMsg = gs.getMessage("User name");
    data.forgetMe = GlideProperties.getBoolean("glide.ui.forgetme");
    data.forgetMeDefault = GlideProperties.getBoolean('glide.ui.remember.me.default', true);
    data.is_logged_in = gs.getSession().isLoggedIn();
    var bypass_sso = options.bypass_sso == "true";
    data.multisso_enabled = !bypass_sso && GlideProperties.getBoolean("glide.authenticate.multisso.enabled");
    data.default_idp = GlideProperties.get("glide.authenticate.sso.redirect.idp");
    data.pageURI = new GlideSPUtil().getPageUri();
    data.multiFactorAuthEnabled = GlideProperties.getBoolean('glide.authenticate.multifactor', false);
    data.certAuthRedirect = gs.getProperty('glide.authenticate.cert.redirect.enable', 'false') == 'true';

    //STRY53144967: Handle user redirection to specific Identity provider mapped in Custom Url record for Portals
    var customURL = GlideProperties.getBoolean('glide.customurl.enabled', false);
    if (customURL == true && data.multisso_enabled == true) {
		var idp = SNC.CustomURLSPUtil.getAutoRedirectIDPForCustomURLWithPortal();
		if(GlideStringUtil.notNil(idp))
			data.default_idp = idp;
    }
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-12-20 06:47:05</sys_created_on>
        <sys_id>906a9f3a1b731110c3ae7596cc4bcb82</sys_id>
        <sys_name>MFA_Login</sys_name>
        <sys_package display_value="Authentcation Authorisation MFA" source="002787761b331110c3ae7596cc4bcba7">002787761b331110c3ae7596cc4bcba7</sys_package>
        <sys_policy/>
        <sys_scope display_value="Authentcation Authorisation MFA">002787761b331110c3ae7596cc4bcba7</sys_scope>
        <sys_update_name>sp_widget_906a9f3a1b731110c3ae7596cc4bcb82</sys_update_name>
        <template><![CDATA[<div ng-if="!data.is_logged_in" class="sp-login-widget" ng-class="::(c.options.use_advanced == 'true' ? 'advanced' : '')">
  <form ng-if="!c.externalLoginMode" class="form-signin" ng-submit="c.login(c.username, c.password)" method="post">
		<div ng-class="::{'panel panel-default': c.options.show_panel}">
			<div ng-if="::c.options.show_panel" class="panel-heading padder-v">
                <h2>Welcome to AAMFA</h2>
				<h3 class="panel-title">${Login} </h3> 
			</div>
			<div ng-class="::{'panel-body': c.options.show_panel}">
				<div class="list-group list-group-sm">
					<div class="list-group-item">
            <label for="username" class="label-advanced">{{::data.usernameMsg}}</label> 
            <input id="username" name="username" autocapitalize="off" ng-keypress="c.message = ''" ng-click="c.message = ''" class="form-control input-advanced" type="text" autofocus="true" ng-model="c.username"/>
					</div>
					<div class="list-group-item">
            <label for="password" class="label-advanced">{{::data.passwordMsg}}</label>
                <p id="btnDescription" class="sr-only" aria-live="polite">"${Password hidden}</p>
            <div class="input-group password-group input-group-advanced">
					<input id="password" name="password" ng-keypress="c.message = ''" ng-click="c.message = ''" class="form-control input-advanced" type="password" ng-model="c.password"/>
					<span class="input-advanced" >
                      <button
							id="mask_icon"
							type="button"
							class="btn btn-default icon-preview input-group-append mask_btn sn-tooltip-basic"
							ng-Click="c.renderMaskIcon()"
							aria-label="${Show Password}"
							data-original-title="${Show password}" />
    				</span>
    			</div>
					</div>
				</div>

				<div ng-if="c.message" class="alert alert-danger login-alert" role="alert">{{c.message}}</div>
				<div ng-if="c.success" class="alert alert-success login-alert" role="alert">{{c.success}}</div>

				<div ng-if="::!c.data.forgetMe" class="checkbox">
          <label>
            <input name="c.remember_me" ng-model="c.remember_me" checked="checked" id="remember_me" type="checkbox" class="checkbox" value="true"/> ${Remember me}
					</label>
				</div>
        <!--STRY50033370: Forgot Password link in the login widget-->
        <div class="forgot-pwd-div m-b">
          <div class="row">
            <div ng-if="::(c.data.forgotPwdLinkProp == 'true')" class="forgot-text" ng-class="::(c.options.use_advanced == 'true' ? 'col-xs-8' : 'col-xs-12')">
              <a class="forgot-pwd-link" ng-href="{{::c.data.pswdResetUrl}}">${Forgot Password ?}</a>
            </div>
            <div ng-class="::(c.options.use_advanced == 'true' && c.data.forgotPwdLinkProp =='true' ? 'col-xs-4' : 'col-xs-12')">
              <button name="login" type="submit" class="btn btn-lg btn-primary btn-block login-button-old">
                ${Login}
              </button>
            </div>
          </div>
        </div>
        <div class="row set-login-type-link m-t" ng-if="::data.multisso_enabled">
          <div class="col-xs-12 text-center">
            <a href="javascript:void(0)"
               ng-click="c.setExternalLogin(true)">${Use external login}</a>
          </div>
        </div>
        <div ng-class="col-xs-12" ng-if="data.cert_based_auth || data.isShowLoginWithIdps">
                <p class="bar"><span>${OR}</span></p>
              </div>
        <div ng-class="col-xs-12" ng-if="::c.data.cert_based_auth" class="loginWithBtn">
           <button name="login" type="button" class="cert btn btn-lg btn-default" ng-click="c.login(null, null, true)"><img alt="" ng-src="certLoginLogo.svg"/>${Login with PIV/CAC card}</button>
        </div>
        <div ng-repeat="a in ::c.data.oidcRecords">
           <div ng-class="col-xs-12" class="loginWithBtn">                 
              <a name="login" class="idp btn btn-lg btn-default" href="javascript:void(0)" ng-click="c.oidcLogin(a.sysId)">
              <img ng-if="::a.isLogoUrlValid" alt="" ng-src="{{::a.logoUrl}}"/>${Log in with} {{::a.name}}
              </a>
           </div>
        </div>
			</div>
		</div>
	</form>
	<form ng-if="c.externalLoginMode" class="form-signin" ng-submit="c.externalLogin()" method="post">
		<div ng-class="::{'panel panel-default': c.options.show_panel}">
			<div ng-if="::c.options.show_panel" class="panel-heading">
				<h3 class="panel-title">${External Login}</h3>
			</div>

			<div ng-class="::{'panel-body': c.options.show_panel}">
				<div class="list-group list-group-sm">
					<div class="list-group-item">
            <label for="username" class="label-advanced">${User ID}</label>
            <input id="username" name="username" ng-click="message = ''" class="form-control input-advanced" type="text" autofocus="true" ng-model="c.username"/>
					</div>
				</div>

        <div class="submit-btn row">
          <div class="col-xs-12">
            <button name="login" type="submit" class="btn btn-lg btn-primary btn-block">
              ${Submit}
            </button>
          </div>
        </div>
        <div class="set-login-type-link row m-t">
          <div class="col-xs-12 text-center">
            <a href="javascript:void(0)"
               ng-click="c.setExternalLogin(false)">${Use internal login}</a>    
          </div>
        </div>
      </div>
	</div>
	</form>
    <Button ng-click="c.showMenuPage()">Scan Qr for menu </Button>
   <div class="sp-self-registration forgot-pwd-link" ng-if="::c.data.self_registration_record_producer">${Don't have an account?}
    	<a ng-href="/{{::c.data.url_suffix}}?id=sn_user_registration&sys_id={{::c.data.self_registration_record_producer}}">{{::c.data.self_registration_label}}</a>
  	</div>
</div>]]></template>
    </sp_widget>
</record_update>
